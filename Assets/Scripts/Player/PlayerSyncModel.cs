using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class PlayerSyncModel
{
    [RealtimeProperty(1, true, true)]
    private string _username;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PlayerSyncModel : IModel {
    // Properties
    public string username {
        get { return _cache.LookForValueInCache(_username, entry => entry.usernameSet, entry => entry.username); }
        set { if (value == username) return; _cache.UpdateLocalCache(entry => { entry.usernameSet = true; entry.username = value; return entry; }); FireUsernameDidChange(value); }
    }
    
    // Events
    public delegate void UsernameDidChange(PlayerSyncModel model, string value);
    public event         UsernameDidChange usernameDidChange;
    
    // Delta updates
    private struct LocalCacheEntry {
        public bool   usernameSet;
        public string username;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache;
    
    public PlayerSyncModel() {
        _cache = new LocalChangeCache<LocalCacheEntry>();
    }
    
    // Events
    public void FireUsernameDidChange(string value) {
        try {
            if (usernameDidChange != null)
                usernameDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        Username = 1,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Mark unreliable properties as clean and flatten the in-flight cache.
            // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
            _username = username;
            _cache.Clear();
            
            // Write all properties
            length += WriteStream.WriteStringLength((uint)PropertyID.Username, _username);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.usernameSet)
                    length += WriteStream.WriteStringLength((uint)PropertyID.Username, entry.username);
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteString((uint)PropertyID.Username, _username);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.usernameSet)
                    _cache.PushLocalCacheToInflight(context.updateID);
                
                if (entry.usernameSet)
                    stream.WriteString((uint)PropertyID.Username, entry.username);
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        bool usernameExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.usernameSet);
        
        // Remove from in-flight
        if (context.deltaUpdatesOnly && context.reliableChannel)
            _cache.RemoveUpdateFromInflight(context.updateID);
        
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Username: {
                    string previousValue = _username;
                    
                    _username = stream.ReadString();
                    
                    if (!usernameExistsInChangeCache && _username != previousValue)
                        FireUsernameDidChange(_username);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
