using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class PlayerManagerModel
{
    [RealtimeProperty(2, true, true)]
    private RealtimeDictionary<PlayerModel> _players;
}


/* ----- Begin Normal Autogenerated Code ----- */
public partial class PlayerManagerModel : IModel {
    // Properties
    public Normal.Realtime.Serialization.RealtimeDictionary<PlayerModel> players {
        get { return _players; }
    }
    
    public PlayerManagerModel() {
        _players = new Normal.Realtime.Serialization.RealtimeDictionary<PlayerModel>();
    }
    
    // Serialization
    enum PropertyID {
        Players = 2,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Write all properties
            length += WriteStream.WriteCollectionLength((uint)PropertyID.Players, _players, context);
        } else {
            // Models
            length += WriteStream.WriteCollectionLength((uint)PropertyID.Players, _players, context);
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteCollection((uint)PropertyID.Players, _players, context);
        } else {
            // Models
            stream.WriteCollection((uint)PropertyID.Players, _players, context);
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Players: {
                    stream.ReadCollection(_players, context);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
